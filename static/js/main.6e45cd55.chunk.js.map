{"version":3,"sources":["Components/SimpleCard.js","Components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","minWidth","title","fontSize","pos","marginBottom","grid","marginTop","cardActions","justifyContent","props","classes","author","content","handler","url","react_default","a","createElement","index_es","className","container","alignItems","justify","Card_default","align","CardContent_default","Typography_default","color","gutterBottom","variant","component","dangerouslySetInnerHTML","__html","CardActions_default","Button_default","onClick","href","Quote","state","quote","this","getQuote","axios","get","concat","Date","getTime","response","console","log","setState","data","error","_context","t0","event","preventDefault","q","strip","encodeURIComponent","html","tmp","document","innerHTML","textContent","innerText","Components_SimpleCard","handleClick","bind","tweet","Component","App","Quote_Quote","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWA0DeA,2BAhDA,CACbC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,IAEhBC,KAAM,CACJC,UAAW,KAEbC,YAAa,CACXC,eAAgB,WAkCLV,CA9Bf,SAAoBW,GAAO,IACjBC,EAA0CD,EAA1CC,QAASC,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,QAASC,EAAgBJ,EAAhBI,QAASC,EAAOL,EAAPK,IAE3C,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAWT,EAAQL,KAAMe,WAAS,EAACC,WAAW,SAASC,QAAQ,UACnEP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMG,UAAWT,EAAQX,KAAMyB,MAAM,UACnCT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYG,UAAWT,EAAQT,MAAO0B,MAAM,gBAAgBC,cAAY,GAAxE,gBAGAb,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYa,QAAQ,KAAKC,UAAU,KAAKC,wBAAyB,CAAEC,OAAQpB,KAE3EG,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYc,UAAU,IAAIC,wBAAyB,CAAEC,OAAQrB,MAG/DI,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAaG,UAAWT,EAAQH,aAC9BQ,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAQa,QAAQ,WAAWM,QAAStB,GAApC,aACAE,EAAAC,EAAAC,cAAA,KAAGmB,KAAMtB,GAAT,mBCzCWuB,6MACnBC,MAAQ,CACNC,MAAO,GACP5B,OAAQ,uFAIR6B,KAAKC,qLAMoBC,IAAMC,IAAN,oGAAAC,QAA8G,IAAIC,MAAOC,mBAA1IC,SACNC,QAAQC,IAAIF,GACZP,KAAKU,SAAS,CACZX,MAAOQ,EAASI,KAAK,GAAGvC,QACxBD,OAAQoC,EAASI,KAAK,GAAGlD,wDAG3B+C,QAAQI,MAARC,EAAAC,mJAIQC,GACVA,EAAMC,iBACNhB,KAAKC,2CAIL,IAAIgB,EAAIjB,KAAKkB,MAAMlB,KAAKF,MAAMC,OAC1BvB,EAAIwB,KAAKkB,MAAMlB,KAAKF,MAAM3B,QAC9B,+CAAAiC,OAAiDe,mBAAkB,GAAAf,OAAIa,EAAJ,OAAAb,OAAW5B,mCAI1E4C,GACJ,IAAIC,EAAMC,SAAS7C,cAAc,OAEjC,OADA4C,EAAIE,UAAYH,EACTC,EAAIG,aAAeH,EAAII,WAAa,oCAI3C,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiD,EAAD,CAAYtD,QAAS4B,KAAKF,MAAMC,MAAO5B,OAAQ6B,KAAKF,MAAM3B,OAAQE,QAAS2B,KAAK2B,YAAYC,KAAK5B,MAAO1B,IAAK0B,KAAK6B,kBA7CvFC,aCSpBC,mLARX,OACExD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASlB,SAASmB,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6e45cd55.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst styles = {\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  grid: {\r\n    marginTop: 100\r\n  },\r\n  cardActions: {\r\n    justifyContent: \"center\"\r\n  }\r\n};\r\n\r\nfunction SimpleCard(props) {\r\n  const { classes, author, content, handler, url} = props;\r\n\r\n  return (\r\n    <Grid className={classes.grid} container alignItems=\"center\" justify=\"center\">\r\n      <Card className={classes.card} align=\"center\">\r\n        <CardContent>\r\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n            Random Quote\r\n        </Typography>\r\n          <Typography variant=\"h5\" component=\"h2\" dangerouslySetInnerHTML={{ __html: content }}>\r\n          </Typography>\r\n          <Typography component=\"p\" dangerouslySetInnerHTML={{ __html: author }}>\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions className={classes.cardActions}>\r\n          <Button variant=\"outlined\" onClick={handler} >New Quote</Button>\r\n          <a href={url}>\r\n            Tweet This\r\n            </a>\r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nSimpleCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleCard);\r\n","import React, { Component } from \"react\";\r\nimport axios from 'axios'\r\nimport SimpleCard from \"./SimpleCard\";\r\n\r\nexport default class Quote extends Component {\r\n  state = {\r\n    quote: '',\r\n    author: '',\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.getQuote()\r\n  }\r\n\r\n  async getQuote() {\r\n    try {\r\n      // grab a quote object and add a timestamp to allow pulling a new quote\r\n      const response = await axios.get(`https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&timestamp=${new Date().getTime()}`);\r\n      console.log(response);\r\n      this.setState({\r\n        quote: response.data[0].content,\r\n        author: response.data[0].title\r\n      })\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  handleClick(event) {\r\n    event.preventDefault()\r\n    this.getQuote()\r\n  }\r\n\r\n  tweet() {\r\n    let q = this.strip(this.state.quote)\r\n    let a = this.strip(this.state.author)\r\n    return (`https://twitter.com/intent/tweet?text=${encodeURIComponent(`${q} - ${a}`)}`)\r\n\r\n  }\r\n\r\n  strip(html) {\r\n    var tmp = document.createElement(\"DIV\");\r\n    tmp.innerHTML = html;\r\n    return tmp.textContent || tmp.innerText || \"\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SimpleCard content={this.state.quote} author={this.state.author} handler={this.handleClick.bind(this)} url={this.tweet()} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Quote from './Components/Quote.js'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Quote />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}